<!DOCTYPE html>
<html>
<head>
    <title>Stefan's Crypto Journal</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #1e1e1e;
            color: #e0e0e0;
            margin: 0;
            padding: 10px;
        }
        
        /* Date Filter Button styles */
        .filter-btn {
            background-color: #333;
            color: #e0e0e0;
            border: 1px solid #444;
            border-radius: 4px;
            padding: 6px 12px;
            margin: 0 4px 5px 0;
            cursor: pointer;
            font-size: 14px;
            transition: all 0.2s;
        }
        
        .filter-btn:hover {
            background-color: #444;
            border-color: #555;
        }
        
        .filter-btn.active {
            background-color: #4CAF50;
            color: white;
            border-color: #4CAF50;
            font-weight: bold;
        }
        
        /* Screenshot Dropzone styles */
        .screenshot-section {
            background-color: #2a2a2a;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            text-align: center;
        }
        
        .dropzone {
            border: 2px dashed #555;
            border-radius: 5px;
            padding: 25px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s;
            margin-bottom: 20px;
        }
        
        .dropzone.highlight {
            border-color: #4CAF50;
            background-color: rgba(76, 175, 80, 0.1);
        }
        
        .dropzone p {
            font-size: 16px;
            margin: 10px 0;
        }
        
        .dropzone .icon {
            font-size: 50px;
            color: #555;
        }
        
        .screenshot-preview {
            max-width: 100%;
            max-height: 300px;
            border-radius: 5px;
            display: none;
            margin: 0 auto 20px;
        }
        
        .loader {
            display: none;
            margin: 20px auto;
            border: 5px solid #333;
            border-radius: 50%;
            border-top: 5px solid #4CAF50;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 15px;
        }
        
        h1, h2, h3 {
            color: #ffffff;
            text-align: center;
        }
        
        h1 {
            margin-bottom: 30px;
            font-size: 28px;
        }
        
        h2 {
            margin: 25px 0 15px;
            font-size: 22px;
        }
        
        h3 {
            font-size: 18px;
            margin-bottom: 10px;
        }
        
        /* Stats section */
        .stats-container {
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 30px;
            gap: 15px;
        }
        
        .stats-box {
            flex: 1;
            min-width: 200px;
            background-color: #2a2a2a;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        
        .stats-title {
            font-size: 14px;
            color: #999;
            margin-bottom: 10px;
        }
        
        .stats-value {
            font-size: 24px;
            font-weight: bold;
            color: #fff;
        }
        
        .positive {
            color: #4CAF50;
        }
        
        .negative {
            color: #f44336;
        }
        
        .expectancy-formula {
            background-color: #2a2a2a;
            padding: 15px;
            border-radius: 8px;
            margin: 20px 0;
            text-align: center;
            font-size: 16px;
        }
        
        .expectancy-result {
            font-size: 22px;
            font-weight: bold;
            margin-top: 10px;
        }
        
        /* Trade log section */
        .trade-log-container {
            margin-bottom: 30px;
            overflow-x: auto;
        }
        
        .trade-log-table {
            width: 100%;
            border-collapse: collapse;
            border: 1px solid #444;
        }
        
        .trade-log-table th {
            background-color: #333;
            color: #fff;
            padding: 12px 8px;
            text-align: left;
            position: sticky;
            top: 0;
        }
        
        .trade-log-table td {
            padding: 10px 8px;
            border-bottom: 1px solid #444;
        }
        
        .trade-log-table tr:nth-child(even) {
            background-color: #2a2a2a;
        }
        
        .win {
            background-color: rgba(76, 175, 80, 0.1);
        }
        
        .loss {
            background-color: rgba(244, 67, 54, 0.1);
        }
        
        /* Add trade form */
        .add-trade-form {
            background-color: #2a2a2a;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
        }
        
        .form-row {
            display: flex;
            flex-wrap: wrap;
            gap: 15px;
            margin-bottom: 15px;
        }
        
        .form-group {
            flex: 1;
            min-width: 150px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 5px;
            color: #ccc;
            font-size: 14px;
        }
        
        .form-group input,
        .form-group select,
        .form-group textarea {
            width: 100%;
            padding: 10px;
            background-color: #333;
            border: 1px solid #555;
            border-radius: 4px;
            color: #fff;
            font-size: 14px;
        }
        
        .form-group textarea {
            height: 80px;
            resize: vertical;
        }
        
        button {
            background-color: #4CAF50;
            color: #fff;
            border: none;
            padding: 12px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            font-weight: bold;
            transition: background-color 0.3s;
        }
        
        button:hover {
            background-color: #3e8e41;
        }
        
        button.delete-btn {
            background-color: #f44336;
            padding: 6px 10px;
            font-size: 12px;
        }
        
        button.delete-btn:hover {
            background-color: #d32f2f;
        }
        
        .chart-container {
            background-color: #2a2a2a;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
            height: 300px;
        }
        
        /* Mobile Responsive */
        @media (max-width: 768px) {
            .form-group {
                min-width: 100%;
            }
            
            .stats-box {
                min-width: 100%;
            }
            
            .trade-log-table {
                font-size: 12px;
            }
            
            .trade-log-table th,
            .trade-log-table td {
                padding: 8px 4px;
            }
        }
        
        /* Export Import buttons */
        .export-import-container {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
            gap: 10px;
        }
        
        .export-import-container button {
            flex: 1;
        }
        
        #importInput {
            display: none;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Stefan's Crypto Journal</h1>
        
        <!-- Export/Import Section -->
        <div class="export-import-container">
            <button id="exportBtn">Export Trades</button>
            <button id="importBtn">Import Trades</button>
            <button id="deleteDataBtn" style="background-color: #f44336;">Delete Data</button>
            <input type="file" id="importInput" accept=".json">
        </div>
        
        <!-- Performance Stats Section -->
        <h2>Trading Performance</h2>
        <div class="stats-container">
            <div class="stats-box">
                <div class="stats-title">Total Trades</div>
                <div class="stats-value" id="totalTrades">0</div>
            </div>
            <div class="stats-box">
                <div class="stats-title">Win Rate</div>
                <div class="stats-value" id="winRate">0%</div>
            </div>
            <div class="stats-box">
                <div class="stats-title">Profit Factor</div>
                <div class="stats-value" id="profitFactor">0</div>
            </div>
            <div class="stats-box">
                <div class="stats-title">Total P&L</div>
                <div class="stats-value" id="totalPnL">$0.00</div>
            </div>
        </div>
        
        <div class="stats-container">
            <div class="stats-box">
                <div class="stats-title">Win Count</div>
                <div class="stats-value positive" id="winCount">0</div>
            </div>
            <div class="stats-box">
                <div class="stats-title">Loss Count</div>
                <div class="stats-value negative" id="lossCount">0</div>
            </div>
            <div class="stats-box">
                <div class="stats-title">Avg Win</div>
                <div class="stats-value positive" id="avgWin">$0.00</div>
            </div>
            <div class="stats-box">
                <div class="stats-title">Avg Loss</div>
                <div class="stats-value negative" id="avgLoss">$0.00</div>
            </div>
        </div>
        
        <div class="expectancy-formula">
            <div>Expected Profit Per Trade = (Win Rate × Average Win) − (Loss Rate × Average Loss)</div>
            <div id="expectancyFormula">(0% × $0.00) − (0% × $0.00)</div>
            <div class="expectancy-result" id="expectancy">$0.00</div>
        </div>
        
        <!-- Visual Charts Section -->
        <h2>Performance Visualization</h2>
        
        <!-- Date Filter Buttons -->
        <div class="date-filters" style="background-color: #2a2a2a; padding: 10px; border-radius: 5px; margin-bottom: 15px; text-align: center;">
            <div style="margin-bottom: 8px; color: #4CAF50; font-weight: bold;">Filter by Time Period:</div>
            <div>
                <button class="filter-btn" data-period="today">Today</button>
                <button class="filter-btn" data-period="yesterday">Yesterday</button>
                <button class="filter-btn" data-period="7days">Last 7 Days</button>
                <button class="filter-btn" data-period="30days">Last 30 Days</button>
                <button class="filter-btn" data-period="90days">Last 90 Days</button>
                <button class="filter-btn" data-period="6months">Past 6 Months</button>
                <button class="filter-btn" data-period="12months">Past 12 Months</button>
                <button class="filter-btn active" data-period="all">All Time</button>
            </div>
        </div>
        
        <div class="stats-container">
            <div class="stats-box" style="flex: 2; height: 250px;">
                <div class="stats-title">Win/Loss Ratio</div>
                <canvas id="winLossChart" style="width: 100%; height: 220px;"></canvas>
            </div>
            <div class="stats-box" style="flex: 3; height: 250px;">
                <div class="stats-title">Profit/Loss History</div>
                <canvas id="pnlHistoryChart" style="width: 100%; height: 220px;"></canvas>
            </div>
        </div>
        
        <!-- Add Trade Form -->
        <h2>Add New Trade</h2>
        

        
        <div class="add-trade-form">
            <div class="form-row">
                <div class="form-group">
                    <label for="tradeDate">Date</label>
                    <input type="date" id="tradeDate" required>
                </div>
                <div class="form-group">
                    <label for="tradePair">Symbol</label>
                    <select id="tradePair" required>
                        <option value="BTC">BTC</option>
                        <option value="ETH">ETH</option>
                        <option value="SOL" selected>SOL</option>
                        <option value="XRP">XRP</option>
                        <option value="SUI">SUI</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="tradeDirection">Direction</label>
                    <select id="tradeDirection" required>
                        <option value="LONG">LONG</option>
                        <option value="SHORT">SHORT</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="tradeResult">Result</label>
                    <select id="tradeResult" required>
                        <option value="Win">Win</option>
                        <option value="Loss">Loss</option>
                    </select>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group">
                    <label for="pnl">P&L ($)</label>
                    <input type="number" id="pnl" step="0.01" required>
                </div>
                <div class="form-group">
                    <label for="leverage">Leverage</label>
                    <select id="leverage" required>
                        <option value="1">1X</option>
                        <option value="5">5X</option>
                        <option value="10">10X</option>
                        <option value="15">15X</option>
                        <option value="20">20X</option>
                        <option value="25">25X</option>
                        <option value="30" selected>30X</option>
                        <option value="40">40X</option>
                        <option value="50">50X</option>
                        <option value="70">70X</option>
                        <option value="100">100X</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="strategy">Strategy</label>
                    <select id="strategy">
                        <option value="DCA">DCA</option>
                        <option value="Scalping">Scalping</option>
                        <option value="Swing">Swing</option>
                        <option value="Breakout">Breakout</option>
                        <option value="Other">Other</option>
                    </select>
                </div>
            </div>
            
            <div class="form-row">
                <div class="form-group" style="width: 100%;">
                    <label for="tradeNotes">Notes</label>
                    <textarea id="tradeNotes" placeholder="Enter any notes, observations, or lessons from this trade..."></textarea>
                </div>
            </div>
            
            <button type="button" id="addTradeBtn">Save Trade</button>
        </div>
        
        <!-- Trade Log Section -->
        <h2>Trade Log</h2>
        <div class="trade-log-container">
            <table class="trade-log-table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Symbol</th>
                        <th>Direction</th>
                        <th>P&L</th>
                        <th>Leverage</th>
                        <th>Result</th>
                        <th>Strategy</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="tradeLogBody">
                    <!-- Trade rows will be added here dynamically -->
                </tbody>
            </table>
        </div>
    </div>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            console.log("GitHub Pages Trading Journal loaded");
            
            // Binance CSV import functionality
            const binanceImportBtn = document.getElementById('binanceImportBtn');
            
            // Add event listener for Binance import button
            binanceImportBtn.addEventListener('click', function() {
                // Create a temporary input element for file selection
                const tempInput = document.createElement('input');
                tempInput.type = 'file';
                tempInput.accept = '.csv';
                
                tempInput.addEventListener('change', function(e) {
                    if (e.target.files.length) {
                        processBinanceCSV(e.target.files[0]);
                    }
                });
                
                tempInput.click();
            });
            
            // Process Binance CSV file
            function processBinanceCSV(file) {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    try {
                        const contents = e.target.result;
                        const lines = contents.split('\n');
                        
                        // Skip header line
                        if (lines.length < 2) {
                            throw new Error('CSV file does not contain enough data');
                        }
                        
                        // Track new trades
                        const newTrades = [];
                        const processedIds = new Set(); // To avoid duplicate trades
                        
                        // Process each line
                        for (let i = 1; i < lines.length; i++) {
                            const line = lines[i].trim();
                            if (!line) continue;
                            
                            // Parse CSV line (handle quoted fields correctly)
                            const values = parseCSVLine(line);
                            
                            if (values.length < 10) continue; // Skip invalid lines
                            
                            // Fields from Binance CSV (may vary based on exact format)
                            const date = values[0]; // Date and time
                            const pair = values[1].split('-')[0]; // Extract symbol from pair (e.g., "BTCUSDT" from "BTCUSDT-PERP")
                            const side = values[2]; // Buy/Sell
                            const price = parseFloat(values[3]);
                            const quantity = parseFloat(values[4]);
                            const fee = parseFloat(values[7]);
                            const realized = parseFloat(values[8]); // Realized PNL
                            
                            // Skip non-closing trades (no realized PNL)
                            if (realized === 0) continue;
                            
                            // Generate a unique ID for this trade
                            const tradeId = `${date}-${pair}-${realized}`;
                            
                            // Skip if we already processed this trade
                            if (processedIds.has(tradeId)) continue;
                            processedIds.add(tradeId);
                            
                            // Create trade object
                            const tradeDate = new Date(date);
                            const formattedDate = tradeDate.toISOString().split('T')[0]; // YYYY-MM-DD
                            
                            const trade = {
                                date: formattedDate,
                                pair: pair,
                                direction: side === 'Buy' ? 'LONG' : 'SHORT',
                                result: realized > 0 ? 'Win' : 'Loss',
                                pnl: realized,
                                leverage: 30, // Default leverage (Binance doesn't export this)
                                strategy: 'Imported', // Default strategy
                                notes: `Imported from Binance - Price: ${price}, Quantity: ${quantity}, Fee: ${fee}`
                            };
                            
                            newTrades.push(trade);
                        }
                        
                        if (newTrades.length === 0) {
                            alert('No valid trades found in the CSV file. Make sure to export your Futures trading history.');
                            return;
                        }
                        
                        // Add the imported trades to existing ones
                        trades = [...trades, ...newTrades];
                        localStorage.setItem('trades', JSON.stringify(trades));
                        
                        renderTradeLog();
                        calculateStats();
                        
                        alert(`Successfully imported ${newTrades.length} trades from Binance`);
                    } catch (error) {
                        console.error('Error importing Binance trades:', error);
                        alert('Failed to import trades: ' + error.message);
                    }
                };
                
                reader.readAsText(file);
            }
            
            // Helper function to parse CSV line correctly (handling quoted fields)
            function parseCSVLine(text) {
                const result = [];
                let current = '';
                let inQuotes = false;
                
                for (let i = 0; i < text.length; i++) {
                    const char = text[i];
                    
                    if (char === '"') {
                        inQuotes = !inQuotes;
                    } else if (char === ',' && !inQuotes) {
                        result.push(current);
                        current = '';
                    } else {
                        current += char;
                    }
                }
                
                if (current) {
                    result.push(current);
                }
                
                return result;
            }
            
            // Set default date to today
            document.getElementById('tradeDate').valueAsDate = new Date();
            
            // Elements for stats
            const totalTradesEl = document.getElementById('totalTrades');
            const winRateEl = document.getElementById('winRate');
            const profitFactorEl = document.getElementById('profitFactor');
            const totalPnLEl = document.getElementById('totalPnL');
            const winCountEl = document.getElementById('winCount');
            const lossCountEl = document.getElementById('lossCount');
            const avgWinEl = document.getElementById('avgWin');
            const avgLossEl = document.getElementById('avgLoss');
            const expectancyFormulaEl = document.getElementById('expectancyFormula');
            const expectancyEl = document.getElementById('expectancy');
            
            // Trade form elements
            const tradeDateInput = document.getElementById('tradeDate');
            const tradePairInput = document.getElementById('tradePair');
            const tradeDirectionInput = document.getElementById('tradeDirection');
            const tradeResultInput = document.getElementById('tradeResult');
            const pnlInput = document.getElementById('pnl');
            const leverageInput = document.getElementById('leverage');
            const strategyInput = document.getElementById('strategy');
            const tradeNotesInput = document.getElementById('tradeNotes');
            const addTradeBtn = document.getElementById('addTradeBtn');
            const tradeLogBody = document.getElementById('tradeLogBody');
            
            // Export/Import elements
            const exportBtn = document.getElementById('exportBtn');
            const importBtn = document.getElementById('importBtn');
            const importInput = document.getElementById('importInput');
            
            // Load trades from local storage
            let trades = JSON.parse(localStorage.getItem('trades')) || [];
            
            // Initialize the trade log
            function initTradeLog() {
                renderTradeLog();
                calculateStats();
            }
            
            // Render trade log table
            function renderTradeLog() {
                tradeLogBody.innerHTML = '';
                
                trades.forEach((trade, index) => {
                    const tr = document.createElement('tr');
                    tr.classList.add(trade.result === 'Win' ? 'win' : 'loss');
                    
                    // Format date
                    const tradeDate = new Date(trade.date);
                    const formattedDate = `${tradeDate.getMonth() + 1}/${tradeDate.getDate()}/${tradeDate.getFullYear()}`;
                    
                    tr.innerHTML = `
                        <td>${formattedDate}</td>
                        <td>${trade.pair}</td>
                        <td>${trade.direction}</td>
                        <td class="${trade.pnl >= 0 ? 'positive' : 'negative'}">$${parseFloat(trade.pnl).toFixed(2)}</td>
                        <td>${trade.leverage}X</td>
                        <td>${trade.result}</td>
                        <td>${trade.strategy || '-'}</td>
                        <td>
                            <button class="delete-btn" data-index="${index}">Delete</button>
                        </td>
                    `;
                    
                    tradeLogBody.appendChild(tr);
                });
                
                // Add event listeners to delete buttons
                document.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const index = parseInt(this.getAttribute('data-index'));
                        deleteTrade(index);
                    });
                });
            }
            
            // Calculate trading stats
            function calculateStats() {
                if (trades.length === 0) {
                    return;
                }
                
                const totalTrades = trades.length;
                const winTrades = trades.filter(trade => trade.result === 'Win');
                const lossTrades = trades.filter(trade => trade.result === 'Loss');
                const winCount = winTrades.length;
                const lossCount = lossTrades.length;
                
                const winRate = winCount / totalTrades;
                const lossRate = lossCount / totalTrades;
                
                const totalPnL = trades.reduce((total, trade) => total + parseFloat(trade.pnl), 0);
                const totalWinAmount = winTrades.reduce((total, trade) => total + parseFloat(trade.pnl), 0);
                const totalLossAmount = Math.abs(lossTrades.reduce((total, trade) => total + parseFloat(trade.pnl), 0));
                
                const avgWin = winCount > 0 ? totalWinAmount / winCount : 0;
                const avgLoss = lossCount > 0 ? totalLossAmount / lossCount : 0;
                
                // Calculate profit factor with protection for division by zero
                let profitFactor = 0;
                if (totalLossAmount > 0) {
                    profitFactor = totalWinAmount / totalLossAmount;
                } else if (winCount > 0) {
                    profitFactor = winCount; // Use win count as a placeholder when no losses
                }
                
                // Calculate expectancy: (Win Rate × Average Win) - (Loss Rate × Average Loss)
                const expectancy = (winRate * avgWin) - (lossRate * avgLoss);
                
                // Update UI
                totalTradesEl.textContent = totalTrades;
                winRateEl.textContent = `${(winRate * 100).toFixed(1)}%`;
                profitFactorEl.textContent = profitFactor.toFixed(2);
                totalPnLEl.textContent = `$${totalPnL.toFixed(2)}`;
                totalPnLEl.className = totalPnL >= 0 ? 'stats-value positive' : 'stats-value negative';
                
                winCountEl.textContent = winCount;
                lossCountEl.textContent = lossCount;
                avgWinEl.textContent = `$${avgWin.toFixed(2)}`;
                avgLossEl.textContent = `$${avgLoss.toFixed(2)}`;
                
                expectancyFormulaEl.textContent = `(${(winRate * 100).toFixed(1)}% × $${avgWin.toFixed(2)}) − (${(lossRate * 100).toFixed(1)}% × $${avgLoss.toFixed(2)})`;
                expectancyEl.textContent = `$${expectancy.toFixed(2)}`;
                expectancyEl.className = expectancy >= 0 ? 'expectancy-result positive' : 'expectancy-result negative';
            }
            
            // Add a new trade
            function addTrade() {
                const pnl = parseFloat(pnlInput.value);
                
                // Validate inputs
                if (!tradeDateInput.value || isNaN(pnl)) {
                    alert("Please fill in all required fields");
                    return;
                }
                
                // Create new trade object
                const newTrade = {
                    date: tradeDateInput.value,
                    pair: tradePairInput.value,
                    direction: tradeDirectionInput.value,
                    pnl: pnl,
                    leverage: parseInt(leverageInput.value),
                    result: tradeResultInput.value,
                    strategy: strategyInput.value,
                    notes: tradeNotesInput.value
                };
                
                // Add trade to array
                trades.push(newTrade);
                
                // Save to local storage
                localStorage.setItem('trades', JSON.stringify(trades));
                
                // Update UI
                renderTradeLog();
                calculateStats();
                
                // Show success message
                alert('Trade saved successfully!');
                
                // Clear form
                clearForm();
            }
            
            // Clear the form fields
            function clearForm() {
                tradeDateInput.valueAsDate = new Date();
                tradePairInput.value = 'SOL';
                tradeDirectionInput.value = 'LONG';
                tradeResultInput.value = 'Win';
                pnlInput.value = '';
                leverageInput.value = '30';
                strategyInput.value = 'DCA';
                tradeNotesInput.value = '';
            }
            
            // Delete a trade
            function deleteTrade(index) {
                if (confirm('Are you sure you want to delete this trade?')) {
                    trades.splice(index, 1);
                    localStorage.setItem('trades', JSON.stringify(trades));
                    renderTradeLog();
                    calculateStats();
                }
            }
            

            
            // Export trades to JSON file
            function exportTrades() {
                if (trades.length === 0) {
                    alert('No trades to export');
                    return;
                }
                
                const dataStr = JSON.stringify(trades, null, 2);
                const dataUri = 'data:application/json;charset=utf-8,' + encodeURIComponent(dataStr);
                
                const exportFileName = `crypto_trades_${new Date().toISOString().slice(0, 10)}.json`;
                
                const linkElement = document.createElement('a');
                linkElement.setAttribute('href', dataUri);
                linkElement.setAttribute('download', exportFileName);
                linkElement.click();
            }
            
            // Import trades from JSON or CSV file
            function importTrades(file) {
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    if (file.name.endsWith('.json')) {
                        try {
                            const importedTrades = JSON.parse(e.target.result);
                            
                            if (Array.isArray(importedTrades)) {
                                // Add the imported trades to existing ones
                                trades = [...trades, ...importedTrades];
                                localStorage.setItem('trades', JSON.stringify(trades));
                                
                                renderTradeLog();
                                calculateStats();
                                
                                alert(`Successfully imported ${importedTrades.length} trades`);
                            } else {
                                alert('Invalid trade data format');
                            }
                        } catch (error) {
                            console.error('Error importing trades:', error);
                            alert('Failed to import trades: Invalid file format');
                        }
                    } else {
                        alert('Unsupported file format. Please use .json files.');
                    }
                };
                
                reader.readAsText(file);
            }
            
            // Delete all trading data
            function deleteAllData() {
                if (confirm('Are you sure you want to delete ALL trading data? This action cannot be undone.')) {
                    trades = [];
                    localStorage.removeItem('trades');
                    renderTradeLog();
                    calculateStats();
                    alert('All trading data has been deleted successfully!');
                }
            }
            
            // Add event listeners
            addTradeBtn.addEventListener('click', addTrade);
            
            exportBtn.addEventListener('click', exportTrades);
            
            importBtn.addEventListener('click', function() {
                importInput.click();
            });
            
            document.getElementById('deleteDataBtn').addEventListener('click', deleteAllData);
            
            importInput.addEventListener('change', function(e) {
                if (e.target.files.length) {
                    importTrades(e.target.files[0]);
                    // Reset input to allow selecting the same file again
                    e.target.value = '';
                }
            });
            
            // Initialize charts
            let winLossChart = null;
            let pnlHistoryChart = null;
            
            // Create win/loss donut chart
            function createWinLossChart(winCount, lossCount) {
                const chartElement = document.getElementById('winLossChart');
                if (!chartElement) return; // Skip if element doesn't exist
                
                // Check if Canvas API is available
                if (!chartElement.getContext) {
                    console.log("Canvas not supported or element is not a canvas");
                    return;
                }
                
                const ctx = chartElement.getContext('2d');
                if (!ctx) return; // Skip if context can't be obtained
                
                // Destroy existing chart if it exists
                if (winLossChart) {
                    winLossChart.destroy();
                }
                
                winLossChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: ['Wins', 'Losses'],
                        datasets: [{
                            data: [winCount, lossCount],
                            backgroundColor: [
                                'rgba(76, 175, 80, 0.8)', // Win color - green
                                'rgba(244, 67, 54, 0.8)'  // Loss color - red
                            ],
                            borderColor: [
                                'rgba(76, 175, 80, 1)',
                                'rgba(244, 67, 54, 1)'
                            ],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    color: '#e0e0e0',
                                    font: {
                                        size: 14
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const total = winCount + lossCount;
                                        const value = context.raw;
                                        const percentage = Math.round((value / total) * 100);
                                        return `${context.label}: ${value} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // Create PnL history chart
            function createPnlHistoryChart() {
                const chartElement = document.getElementById('pnlHistoryChart');
                if (!chartElement) return; // Skip if element doesn't exist
                
                // Check if Canvas API is available
                if (!chartElement.getContext) {
                    console.log("Canvas not supported or element is not a canvas");
                    return;
                }
                
                const ctx = chartElement.getContext('2d');
                if (!ctx) return; // Skip if context can't be obtained
                
                // Sort trades by date
                const sortedTrades = [...trades].sort((a, b) => new Date(a.date) - new Date(b.date));
                
                // Prepare data - last 20 trades or all if less than 20
                const displayTrades = sortedTrades.slice(-20);
                const labels = displayTrades.map(trade => {
                    const date = new Date(trade.date);
                    return `${date.getMonth() + 1}/${date.getDate()}`;
                });
                
                const pnlData = displayTrades.map(trade => parseFloat(trade.pnl));
                
                // Calculate cumulative PnL
                const cumulativePnl = [];
                let runningTotal = 0;
                pnlData.forEach(pnl => {
                    runningTotal += pnl;
                    cumulativePnl.push(runningTotal);
                });
                
                // Destroy existing chart if it exists
                if (pnlHistoryChart) {
                    pnlHistoryChart.destroy();
                }
                
                pnlHistoryChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                type: 'bar',
                                label: 'Trade P&L',
                                data: pnlData,
                                backgroundColor: pnlData.map(value => value >= 0 ? 'rgba(76, 175, 80, 0.7)' : 'rgba(244, 67, 54, 0.7)'),
                                borderColor: pnlData.map(value => value >= 0 ? 'rgba(76, 175, 80, 1)' : 'rgba(244, 67, 54, 1)'),
                                borderWidth: 1
                            },
                            {
                                type: 'line',
                                label: 'Cumulative P&L',
                                data: cumulativePnl,
                                fill: false,
                                borderColor: 'rgba(33, 150, 243, 1)',
                                tension: 0.1,
                                borderWidth: 2,
                                pointBackgroundColor: 'rgba(33, 150, 243, 1)',
                                yAxisID: 'y1'
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                ticks: {
                                    color: '#cccccc'
                                },
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.05)'
                                }
                            },
                            y: {
                                ticks: {
                                    color: '#cccccc'
                                },
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.05)'
                                }
                            },
                            y1: {
                                position: 'right',
                                ticks: {
                                    color: '#33a9ff'
                                },
                                grid: {
                                    drawOnChartArea: false
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    color: '#e0e0e0',
                                    font: {
                                        size: 12
                                    }
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.dataset.label || '';
                                        if (label) {
                                            return `${label}: $${context.raw.toFixed(2)}`;
                                        }
                                        return `$${context.raw.toFixed(2)}`;
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // Update the calculateStats function to also update charts
            const originalCalculateStats = calculateStats;
            calculateStats = function() {
                originalCalculateStats();
                
                // Only create charts if there are trades
                if (trades.length > 0) {
                    const winCount = trades.filter(trade => trade.result === 'Win').length;
                    const lossCount = trades.filter(trade => trade.result === 'Loss').length;
                    
                    // Create charts
                    createWinLossChart(winCount, lossCount);
                    createPnlHistoryChart();
                } else {
                    // Create empty charts as placeholders
                    createWinLossChart(0, 0);
                    createPnlHistoryChart();
                }
            };
            
            // Add date filter buttons functionality
            function setupDateFilterButtons() {
                document.querySelectorAll('.filter-btn').forEach(button => {
                    button.addEventListener('click', function() {
                        // Remove active class from all buttons
                        document.querySelectorAll('.filter-btn').forEach(btn => {
                            btn.classList.remove('active');
                        });
                        
                        // Add active class to clicked button
                        this.classList.add('active');
                        
                        // Get filter period
                        const period = this.getAttribute('data-period');
                        
                        // Filter trades by period
                        filterTradesByPeriod(period);
                    });
                });
            }
            
            // Filter trades by time period
            function filterTradesByPeriod(period) {
                const today = new Date();
                today.setHours(0, 0, 0, 0);
                
                let filteredTrades = [];
                
                switch(period) {
                    case 'today':
                        filteredTrades = trades.filter(trade => {
                            const tradeDate = new Date(trade.date);
                            return tradeDate.toDateString() === today.toDateString();
                        });
                        break;
                        
                    case 'yesterday':
                        const yesterday = new Date(today);
                        yesterday.setDate(today.getDate() - 1);
                        
                        filteredTrades = trades.filter(trade => {
                            const tradeDate = new Date(trade.date);
                            return tradeDate.toDateString() === yesterday.toDateString();
                        });
                        break;
                        
                    case '7days':
                        const sevenDaysAgo = new Date(today);
                        sevenDaysAgo.setDate(today.getDate() - 7);
                        
                        filteredTrades = trades.filter(trade => {
                            const tradeDate = new Date(trade.date);
                            return tradeDate >= sevenDaysAgo;
                        });
                        break;
                        
                    case '30days':
                        const thirtyDaysAgo = new Date(today);
                        thirtyDaysAgo.setDate(today.getDate() - 30);
                        
                        filteredTrades = trades.filter(trade => {
                            const tradeDate = new Date(trade.date);
                            return tradeDate >= thirtyDaysAgo;
                        });
                        break;
                        
                    case '90days':
                        const ninetyDaysAgo = new Date(today);
                        ninetyDaysAgo.setDate(today.getDate() - 90);
                        
                        filteredTrades = trades.filter(trade => {
                            const tradeDate = new Date(trade.date);
                            return tradeDate >= ninetyDaysAgo;
                        });
                        break;
                        
                    case '6months':
                        const sixMonthsAgo = new Date(today);
                        sixMonthsAgo.setMonth(today.getMonth() - 6);
                        
                        filteredTrades = trades.filter(trade => {
                            const tradeDate = new Date(trade.date);
                            return tradeDate >= sixMonthsAgo;
                        });
                        break;
                        
                    case '12months':
                        const twelveMonthsAgo = new Date(today);
                        twelveMonthsAgo.setMonth(today.getMonth() - 12);
                        
                        filteredTrades = trades.filter(trade => {
                            const tradeDate = new Date(trade.date);
                            return tradeDate >= twelveMonthsAgo;
                        });
                        break;
                        
                    case 'all':
                    default:
                        filteredTrades = [...trades]; // Use all trades
                        break;
                }
                
                // Update UI with filtered trades
                renderFilteredTrades(filteredTrades);
            }
            
            // Render filtered trades in the trade log
            function renderFilteredTrades(filteredTrades) {
                const tradeLogBody = document.getElementById('tradeLogBody');
                tradeLogBody.innerHTML = '';
                
                if (filteredTrades.length === 0) {
                    const tr = document.createElement('tr');
                    const td = document.createElement('td');
                    td.setAttribute('colspan', '8');
                    td.textContent = 'No trades in selected time period';
                    td.style.textAlign = 'center';
                    tr.appendChild(td);
                    tradeLogBody.appendChild(tr);
                    
                    // Reset stats when no trades
                    resetStats();
                    
                    // Reset charts
                    updateChartsWithEmptyData();
                    return;
                }
                
                // Sort by date (newest first)
                const sortedTrades = [...filteredTrades].sort((a, b) => new Date(b.date) - new Date(a.date));
                
                sortedTrades.forEach((trade) => {
                    const tr = document.createElement('tr');
                    tr.classList.add(trade.result === 'Win' ? 'win' : 'loss');
                    
                    // Format date
                    const tradeDate = new Date(trade.date);
                    const formattedDate = `${tradeDate.getMonth() + 1}/${tradeDate.getDate()}/${tradeDate.getFullYear()}`;
                    
                    // Find index in original array for delete functionality
                    const originalIndex = trades.findIndex(t => 
                        t.date === trade.date && 
                        t.pair === trade.pair && 
                        t.pnl === trade.pnl);
                    
                    tr.innerHTML = `
                        <td>${formattedDate}</td>
                        <td>${trade.pair}</td>
                        <td>${trade.direction}</td>
                        <td class="${parseFloat(trade.pnl) >= 0 ? 'positive' : 'negative'}">$${parseFloat(trade.pnl).toFixed(2)}</td>
                        <td>${trade.leverage}X</td>
                        <td>${trade.result}</td>
                        <td>${trade.strategy || '-'}</td>
                        <td>
                            <button class="delete-btn" data-index="${originalIndex}">Delete</button>
                            ${trade.notes ? '<button class="notes-btn" data-index="' + originalIndex + '">Notes</button>' : ''}
                        </td>
                    `;
                    
                    tradeLogBody.appendChild(tr);
                });
                
                // Add event listeners to buttons
                document.querySelectorAll('.delete-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const index = parseInt(this.getAttribute('data-index'));
                        deleteTrade(index);
                    });
                });
                
                document.querySelectorAll('.notes-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const index = parseInt(this.getAttribute('data-index'));
                        alert(trades[index].notes);
                    });
                });
                
                // Calculate and update stats
                calculateStatsForTrades(filteredTrades);
                
                // Update charts
                updateChartsWithTrades(filteredTrades);
            }
            
            // Reset stats to zero
            function resetStats() {
                document.getElementById('totalTrades').textContent = '0';
                document.getElementById('winRate').textContent = '0%';
                document.getElementById('profitFactor').textContent = '0.00';
                document.getElementById('totalPnL').textContent = '$0.00';
                document.getElementById('totalPnL').className = 'stats-value';
                document.getElementById('winCount').textContent = '0';
                document.getElementById('lossCount').textContent = '0';
                document.getElementById('avgWin').textContent = '$0.00';
                document.getElementById('avgLoss').textContent = '$0.00';
                document.getElementById('expectancy').textContent = '$0.00';
                document.getElementById('expectancyFormula').textContent = '(0% × $0.00) − (0% × $0.00)';
            }
            
            // Calculate stats for filtered trades
            function calculateStatsForTrades(filteredTrades) {
                const totalTrades = filteredTrades.length;
                const winTrades = filteredTrades.filter(trade => trade.result === 'Win');
                const lossTrades = filteredTrades.filter(trade => trade.result === 'Loss');
                const winCount = winTrades.length;
                const lossCount = lossTrades.length;
                
                const winRate = winCount / totalTrades;
                const lossRate = lossCount / totalTrades;
                
                const totalPnL = filteredTrades.reduce((total, trade) => total + parseFloat(trade.pnl), 0);
                const totalWinAmount = winTrades.reduce((total, trade) => total + parseFloat(trade.pnl), 0);
                const totalLossAmount = Math.abs(lossTrades.reduce((total, trade) => total + parseFloat(trade.pnl), 0));
                
                const avgWin = winCount > 0 ? totalWinAmount / winCount : 0;
                const avgLoss = lossCount > 0 ? totalLossAmount / lossCount : 0;
                
                // Calculate profit factor
                let profitFactor = 0;
                if (totalLossAmount > 0) {
                    profitFactor = totalWinAmount / totalLossAmount;
                } else if (winCount > 0) {
                    profitFactor = winCount; // Use win count when no losses
                }
                
                // Calculate expectancy
                const expectancy = (winRate * avgWin) - (lossRate * avgLoss);
                
                // Update UI
                document.getElementById('totalTrades').textContent = totalTrades;
                document.getElementById('winRate').textContent = `${(winRate * 100).toFixed(1)}%`;
                document.getElementById('profitFactor').textContent = profitFactor.toFixed(2);
                document.getElementById('totalPnL').textContent = `$${totalPnL.toFixed(2)}`;
                document.getElementById('totalPnL').className = totalPnL >= 0 ? 'stats-value positive' : 'stats-value negative';
                
                document.getElementById('winCount').textContent = winCount;
                document.getElementById('lossCount').textContent = lossCount;
                document.getElementById('avgWin').textContent = `$${avgWin.toFixed(2)}`;
                document.getElementById('avgLoss').textContent = `$${avgLoss.toFixed(2)}`;
                
                document.getElementById('expectancy').textContent = `$${expectancy.toFixed(2)}`;
                document.getElementById('expectancyFormula').textContent = `(${(winRate * 100).toFixed(1)}% × $${avgWin.toFixed(2)}) − (${(lossRate * 100).toFixed(1)}% × $${avgLoss.toFixed(2)})`;
            }
            
            // Update charts with filtered trades
            function updateChartsWithTrades(filteredTrades) {
                // Update Win/Loss Chart
                if (winLossChart) {
                    winLossChart.destroy();
                }
                
                const winCount = filteredTrades.filter(trade => trade.result === 'Win').length;
                const lossCount = filteredTrades.filter(trade => trade.result === 'Loss').length;
                
                const winLossCtx = document.getElementById('winLossChart').getContext('2d');
                winLossChart = new Chart(winLossCtx, {
                    type: 'pie',
                    data: {
                        labels: ['Win', 'Loss'],
                        datasets: [{
                            data: [winCount, lossCount],
                            backgroundColor: ['#4CAF50', '#FF5252'],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                labels: {
                                    color: '#e0e0e0',
                                    font: {
                                        size: 14
                                    }
                                }
                            }
                        }
                    }
                });
                
                // Update PnL History Chart
                updatePnlChart(filteredTrades);
            }
            
            // Update PnL chart with filtered trades
            function updatePnlChart(filteredTrades) {
                if (pnlHistoryChart) {
                    pnlHistoryChart.destroy();
                }
                
                const ctx = document.getElementById('pnlHistoryChart').getContext('2d');
                
                // Sort trades by date (oldest first)
                const displayTrades = [...filteredTrades].sort((a, b) => new Date(a.date) - new Date(b.date));
                
                // Prepare labels and data
                const labels = displayTrades.map(trade => {
                    const date = new Date(trade.date);
                    return `${date.getMonth() + 1}/${date.getDate()}`;
                });
                
                const pnlData = displayTrades.map(trade => parseFloat(trade.pnl));
                
                // Calculate cumulative PnL
                const cumulativePnl = [];
                let runningTotal = 0;
                pnlData.forEach(pnl => {
                    runningTotal += pnl;
                    cumulativePnl.push(runningTotal);
                });
                
                // Create the chart
                pnlHistoryChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels,
                        datasets: [
                            {
                                type: 'bar',
                                label: 'Trade P&L',
                                data: pnlData,
                                backgroundColor: pnlData.map(value => value >= 0 ? 'rgba(76, 175, 80, 0.7)' : 'rgba(244, 67, 54, 0.7)'),
                                borderColor: pnlData.map(value => value >= 0 ? 'rgba(76, 175, 80, 1)' : 'rgba(244, 67, 54, 1)'),
                                borderWidth: 1
                            },
                            {
                                type: 'line',
                                label: 'Cumulative P&L',
                                data: cumulativePnl,
                                fill: false,
                                borderColor: 'rgba(33, 150, 243, 1)',
                                tension: 0.1,
                                borderWidth: 2,
                                pointBackgroundColor: 'rgba(33, 150, 243, 1)',
                                yAxisID: 'y1'
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                ticks: {
                                    color: '#cccccc'
                                },
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                }
                            },
                            y: {
                                ticks: {
                                    color: '#cccccc',
                                    callback: function(value) {
                                        return '$' + value;
                                    }
                                },
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                }
                            },
                            y1: {
                                position: 'right',
                                ticks: {
                                    color: '#cccccc',
                                    callback: function(value) {
                                        return '$' + value;
                                    }
                                },
                                grid: {
                                    drawOnChartArea: false
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                labels: {
                                    color: '#cccccc'
                                }
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        let label = context.dataset.label || '';
                                        if (label) {
                                            label += ': ';
                                        }
                                        if (context.parsed.y !== null) {
                                            label += '$' + context.parsed.y.toFixed(2);
                                        }
                                        return label;
                                    }
                                }
                            }
                        }
                    }
                });
            }
            
            // Update charts with empty data
            function updateChartsWithEmptyData() {
                // Reset win/loss chart
                if (winLossChart) {
                    winLossChart.destroy();
                }
                
                const winLossCtx = document.getElementById('winLossChart').getContext('2d');
                winLossChart = new Chart(winLossCtx, {
                    type: 'pie',
                    data: {
                        labels: ['Win', 'Loss'],
                        datasets: [{
                            data: [0, 0],
                            backgroundColor: ['#4CAF50', '#FF5252'],
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                labels: {
                                    color: '#e0e0e0',
                                    font: {
                                        size: 14
                                    }
                                }
                            }
                        }
                    }
                });
                
                // Reset PnL history chart
                if (pnlHistoryChart) {
                    pnlHistoryChart.destroy();
                }
                
                const ctx = document.getElementById('pnlHistoryChart').getContext('2d');
                pnlHistoryChart = new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: [],
                        datasets: [
                            {
                                type: 'bar',
                                label: 'Trade P&L',
                                data: [],
                                backgroundColor: [],
                                borderColor: [],
                                borderWidth: 1
                            },
                            {
                                type: 'line',
                                label: 'Cumulative P&L',
                                data: [],
                                fill: false,
                                borderColor: 'rgba(33, 150, 243, 1)',
                                tension: 0.1,
                                borderWidth: 2,
                                pointBackgroundColor: 'rgba(33, 150, 243, 1)',
                                yAxisID: 'y1'
                            }
                        ]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            x: {
                                ticks: {
                                    color: '#cccccc'
                                },
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                }
                            },
                            y: {
                                ticks: {
                                    color: '#cccccc',
                                    callback: function(value) {
                                        return '$' + value;
                                    }
                                },
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                }
                            },
                            y1: {
                                position: 'right',
                                ticks: {
                                    color: '#cccccc',
                                    callback: function(value) {
                                        return '$' + value;
                                    }
                                },
                                grid: {
                                    drawOnChartArea: false
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                labels: {
                                    color: '#cccccc'
                                }
                            }
                        }
                    }
                });
            }
            
            // Setup date filter buttons - only call once
            setupDateFilterButtons();
            
            // Initialize the app
            initTradeLog();
        });
    </script>
</body>
</html>